ARM GAS  /tmp/ccC0M2jY.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_desc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USBD_FS_DeviceDescriptor,"ax",%progbits
  16              		.align	1
  17              		.global	USBD_FS_DeviceDescriptor
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	USBD_FS_DeviceDescriptor:
  25              	.LVL0:
  26              	.LFB43:
  27              		.file 1 "Core/Src/usbd_desc.c"
   1:Core/Src/usbd_desc.c **** /**
   2:Core/Src/usbd_desc.c ****   ******************************************************************************
   3:Core/Src/usbd_desc.c ****   * @file           : usbd_desc.c
   4:Core/Src/usbd_desc.c ****   * @version        : v2.0_Cube
   5:Core/Src/usbd_desc.c ****   * @brief          : This file implements the USB device descriptors.
   6:Core/Src/usbd_desc.c ****   ******************************************************************************
   7:Core/Src/usbd_desc.c ****   * This notice applies to any and all portions of this file
   8:Core/Src/usbd_desc.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Core/Src/usbd_desc.c ****   * USER CODE END. Other portions of this file, whether
  10:Core/Src/usbd_desc.c ****   * inserted by the user or by software development tools
  11:Core/Src/usbd_desc.c ****   * are owned by their respective copyright owners.
  12:Core/Src/usbd_desc.c ****   *
  13:Core/Src/usbd_desc.c ****   * Copyright (c) 2018 STMicroelectronics International N.V.
  14:Core/Src/usbd_desc.c ****   * All rights reserved.
  15:Core/Src/usbd_desc.c ****   *
  16:Core/Src/usbd_desc.c ****   * Redistribution and use in source and binary forms, with or without
  17:Core/Src/usbd_desc.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Core/Src/usbd_desc.c ****   *
  19:Core/Src/usbd_desc.c ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Core/Src/usbd_desc.c ****   *    this list of conditions and the following disclaimer.
  21:Core/Src/usbd_desc.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Core/Src/usbd_desc.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Core/Src/usbd_desc.c ****   *    and/or other materials provided with the distribution.
  24:Core/Src/usbd_desc.c ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Core/Src/usbd_desc.c ****   *    contributors to this software may be used to endorse or promote products
  26:Core/Src/usbd_desc.c ****   *    derived from this software without specific written permission.
  27:Core/Src/usbd_desc.c ****   * 4. This software, including modifications and/or derivative works of this
  28:Core/Src/usbd_desc.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Core/Src/usbd_desc.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Core/Src/usbd_desc.c ****   * 5. Redistribution and use of this software other than as permitted under
  31:Core/Src/usbd_desc.c ****   *    this license is void and will automatically terminate your rights under
ARM GAS  /tmp/ccC0M2jY.s 			page 2


  32:Core/Src/usbd_desc.c ****   *    this license.
  33:Core/Src/usbd_desc.c ****   *
  34:Core/Src/usbd_desc.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Core/Src/usbd_desc.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Core/Src/usbd_desc.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Core/Src/usbd_desc.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Core/Src/usbd_desc.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Core/Src/usbd_desc.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Core/Src/usbd_desc.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Core/Src/usbd_desc.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Core/Src/usbd_desc.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Core/Src/usbd_desc.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Core/Src/usbd_desc.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Core/Src/usbd_desc.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Core/Src/usbd_desc.c ****   *
  47:Core/Src/usbd_desc.c ****   ******************************************************************************
  48:Core/Src/usbd_desc.c ****   */
  49:Core/Src/usbd_desc.c **** 
  50:Core/Src/usbd_desc.c **** /* Includes ------------------------------------------------------------------*/
  51:Core/Src/usbd_desc.c **** #include "usbd_core.h"
  52:Core/Src/usbd_desc.c **** #include "usbd_desc.h"
  53:Core/Src/usbd_desc.c **** #include "usbd_conf.h"
  54:Core/Src/usbd_desc.c **** 
  55:Core/Src/usbd_desc.c **** /* USER CODE BEGIN INCLUDE */
  56:Core/Src/usbd_desc.c **** 
  57:Core/Src/usbd_desc.c **** /* USER CODE END INCLUDE */
  58:Core/Src/usbd_desc.c **** 
  59:Core/Src/usbd_desc.c **** /* Private typedef -----------------------------------------------------------*/
  60:Core/Src/usbd_desc.c **** /* Private define ------------------------------------------------------------*/
  61:Core/Src/usbd_desc.c **** /* Private macro -------------------------------------------------------------*/
  62:Core/Src/usbd_desc.c **** 
  63:Core/Src/usbd_desc.c **** /* USER CODE BEGIN PV */
  64:Core/Src/usbd_desc.c **** /* Private variables ---------------------------------------------------------*/
  65:Core/Src/usbd_desc.c **** 
  66:Core/Src/usbd_desc.c **** /* USER CODE END PV */
  67:Core/Src/usbd_desc.c **** 
  68:Core/Src/usbd_desc.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  69:Core/Src/usbd_desc.c ****   * @{
  70:Core/Src/usbd_desc.c ****   */
  71:Core/Src/usbd_desc.c **** 
  72:Core/Src/usbd_desc.c **** /** @addtogroup USBD_DESC
  73:Core/Src/usbd_desc.c ****   * @{
  74:Core/Src/usbd_desc.c ****   */
  75:Core/Src/usbd_desc.c **** 
  76:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_TypesDefinitions USBD_DESC_Private_TypesDefinitions
  77:Core/Src/usbd_desc.c ****   * @brief Private types.
  78:Core/Src/usbd_desc.c ****   * @{
  79:Core/Src/usbd_desc.c ****   */
  80:Core/Src/usbd_desc.c **** 
  81:Core/Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  82:Core/Src/usbd_desc.c **** 
  83:Core/Src/usbd_desc.c **** /* USER CODE END PRIVATE_TYPES */
  84:Core/Src/usbd_desc.c **** 
  85:Core/Src/usbd_desc.c **** /**
  86:Core/Src/usbd_desc.c ****   * @}
  87:Core/Src/usbd_desc.c ****   */
  88:Core/Src/usbd_desc.c **** 
ARM GAS  /tmp/ccC0M2jY.s 			page 3


  89:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Defines USBD_DESC_Private_Defines
  90:Core/Src/usbd_desc.c ****   * @brief Private defines.
  91:Core/Src/usbd_desc.c ****   * @{
  92:Core/Src/usbd_desc.c ****   */
  93:Core/Src/usbd_desc.c **** 
  94:Core/Src/usbd_desc.c **** /*
  95:Core/Src/usbd_desc.c ****  *************************************************[ATTENTION]**************************************
  96:Core/Src/usbd_desc.c ****  *
  97:Core/Src/usbd_desc.c ****  * VID 0x1209 and PID 0x0001 is experimental IDs from http://pid.codes .
  98:Core/Src/usbd_desc.c ****  * You must get your own IDs, and change to your own IDs in order to avoid conflicting to other USB
  99:Core/Src/usbd_desc.c ****  *
 100:Core/Src/usbd_desc.c ****  **************************************************************************************************
 101:Core/Src/usbd_desc.c **** */
 102:Core/Src/usbd_desc.c **** 
 103:Core/Src/usbd_desc.c **** #define USBD_VID                        0x33ff
 104:Core/Src/usbd_desc.c **** #define USBD_LANGID_STRING              1041
 105:Core/Src/usbd_desc.c **** #define USBD_MANUFACTURER_STRING        "mvs"
 106:Core/Src/usbd_desc.c **** #define USBD_PID_FS                     0x4025
 107:Core/Src/usbd_desc.c **** #define USBD_PRODUCT_STRING_FS          "otterlinear keyboard"
 108:Core/Src/usbd_desc.c **** #define USBD_SERIALNUMBER_STRING_FS     "000000000001"
 109:Core/Src/usbd_desc.c **** #define USBD_CONFIGURATION_STRING_FS    "HID Config"
 110:Core/Src/usbd_desc.c **** #define USBD_INTERFACE_STRING_FS        "HID Interface"
 111:Core/Src/usbd_desc.c **** 
 112:Core/Src/usbd_desc.c **** 
 113:Core/Src/usbd_desc.c **** 
 114:Core/Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
 115:Core/Src/usbd_desc.c **** 
 116:Core/Src/usbd_desc.c **** /* USER CODE END PRIVATE_DEFINES */
 117:Core/Src/usbd_desc.c **** 
 118:Core/Src/usbd_desc.c **** /**
 119:Core/Src/usbd_desc.c ****   * @}
 120:Core/Src/usbd_desc.c ****   */
 121:Core/Src/usbd_desc.c **** 
 122:Core/Src/usbd_desc.c **** /* USER CODE BEGIN 0 */
 123:Core/Src/usbd_desc.c **** 
 124:Core/Src/usbd_desc.c **** /* USER CODE END 0 */
 125:Core/Src/usbd_desc.c **** 
 126:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Macros USBD_DESC_Private_Macros
 127:Core/Src/usbd_desc.c ****   * @brief Private macros.
 128:Core/Src/usbd_desc.c ****   * @{
 129:Core/Src/usbd_desc.c ****   */
 130:Core/Src/usbd_desc.c **** 
 131:Core/Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_MACRO */
 132:Core/Src/usbd_desc.c **** 
 133:Core/Src/usbd_desc.c **** /* USER CODE END PRIVATE_MACRO */
 134:Core/Src/usbd_desc.c **** 
 135:Core/Src/usbd_desc.c **** /**
 136:Core/Src/usbd_desc.c ****   * @}
 137:Core/Src/usbd_desc.c ****   */
 138:Core/Src/usbd_desc.c **** 
 139:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_FunctionPrototypes USBD_DESC_Private_FunctionPrototypes
 140:Core/Src/usbd_desc.c ****   * @brief Private functions declaration.
 141:Core/Src/usbd_desc.c ****   * @{
 142:Core/Src/usbd_desc.c ****   */
 143:Core/Src/usbd_desc.c **** 
 144:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 145:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
ARM GAS  /tmp/ccC0M2jY.s 			page 4


 146:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 147:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 148:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 149:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 150:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 151:Core/Src/usbd_desc.c **** 
 152:Core/Src/usbd_desc.c **** #ifdef USB_SUPPORT_USER_STRING_DESC
 153:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_USRStringDesc(USBD_SpeedTypeDef speed, uint8_t idx, uint16_t *length);
 154:Core/Src/usbd_desc.c **** #endif /* USB_SUPPORT_USER_STRING_DESC */
 155:Core/Src/usbd_desc.c **** 
 156:Core/Src/usbd_desc.c **** /**
 157:Core/Src/usbd_desc.c ****   * @}
 158:Core/Src/usbd_desc.c ****   */
 159:Core/Src/usbd_desc.c **** 
 160:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables USBD_DESC_Private_Variables
 161:Core/Src/usbd_desc.c ****   * @brief Private variables.
 162:Core/Src/usbd_desc.c ****   * @{
 163:Core/Src/usbd_desc.c ****   */
 164:Core/Src/usbd_desc.c **** 
 165:Core/Src/usbd_desc.c **** USBD_DescriptorsTypeDef FS_Desc =
 166:Core/Src/usbd_desc.c **** {
 167:Core/Src/usbd_desc.c ****   USBD_FS_DeviceDescriptor
 168:Core/Src/usbd_desc.c **** , USBD_FS_LangIDStrDescriptor
 169:Core/Src/usbd_desc.c **** , USBD_FS_ManufacturerStrDescriptor
 170:Core/Src/usbd_desc.c **** , USBD_FS_ProductStrDescriptor
 171:Core/Src/usbd_desc.c **** , USBD_FS_SerialStrDescriptor
 172:Core/Src/usbd_desc.c **** , USBD_FS_ConfigStrDescriptor
 173:Core/Src/usbd_desc.c **** , USBD_FS_InterfaceStrDescriptor
 174:Core/Src/usbd_desc.c **** };
 175:Core/Src/usbd_desc.c **** 
 176:Core/Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 177:Core/Src/usbd_desc.c ****   #pragma data_alignment=4
 178:Core/Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 179:Core/Src/usbd_desc.c **** /** USB standard device descriptor. */
 180:Core/Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
 181:Core/Src/usbd_desc.c **** {
 182:Core/Src/usbd_desc.c ****   0x12,                       /*bLength */
 183:Core/Src/usbd_desc.c ****   USB_DESC_TYPE_DEVICE,       /*bDescriptorType*/
 184:Core/Src/usbd_desc.c ****   0x00,                       /*bcdUSB */
 185:Core/Src/usbd_desc.c ****   0x02,
 186:Core/Src/usbd_desc.c ****   0x02,                       /*bDeviceClass*/
 187:Core/Src/usbd_desc.c ****   0x02,                       /*bDeviceSubClass*/
 188:Core/Src/usbd_desc.c ****   0x00,                       /*bDeviceProtocol*/
 189:Core/Src/usbd_desc.c ****   USB_MAX_EP0_SIZE,           /*bMaxPacketSize*/
 190:Core/Src/usbd_desc.c ****   LOBYTE(USBD_VID),           /*idVendor*/
 191:Core/Src/usbd_desc.c ****   HIBYTE(USBD_VID),           /*idVendor*/
 192:Core/Src/usbd_desc.c ****   LOBYTE(USBD_PID_FS),        /*idProduct*/
 193:Core/Src/usbd_desc.c ****   HIBYTE(USBD_PID_FS),        /*idProduct*/
 194:Core/Src/usbd_desc.c ****   0x00,                       /*bcdDevice rel. 2.00*/
 195:Core/Src/usbd_desc.c ****   0x02,
 196:Core/Src/usbd_desc.c ****   USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
 197:Core/Src/usbd_desc.c ****   USBD_IDX_PRODUCT_STR,       /*Index of product string*/
 198:Core/Src/usbd_desc.c ****   USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
 199:Core/Src/usbd_desc.c ****   USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
 200:Core/Src/usbd_desc.c **** };
 201:Core/Src/usbd_desc.c **** 
 202:Core/Src/usbd_desc.c **** /* USB_DeviceDescriptor */
ARM GAS  /tmp/ccC0M2jY.s 			page 5


 203:Core/Src/usbd_desc.c **** 
 204:Core/Src/usbd_desc.c **** /**
 205:Core/Src/usbd_desc.c ****   * @}
 206:Core/Src/usbd_desc.c ****   */
 207:Core/Src/usbd_desc.c **** 
 208:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables USBD_DESC_Private_Variables
 209:Core/Src/usbd_desc.c ****   * @brief Private variables.
 210:Core/Src/usbd_desc.c ****   * @{
 211:Core/Src/usbd_desc.c ****   */
 212:Core/Src/usbd_desc.c **** 
 213:Core/Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 214:Core/Src/usbd_desc.c ****   #pragma data_alignment=4
 215:Core/Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 216:Core/Src/usbd_desc.c **** 
 217:Core/Src/usbd_desc.c **** /** USB lang indentifier descriptor. */
 218:Core/Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END =
 219:Core/Src/usbd_desc.c **** {
 220:Core/Src/usbd_desc.c ****      USB_LEN_LANGID_STR_DESC,
 221:Core/Src/usbd_desc.c ****      USB_DESC_TYPE_STRING,
 222:Core/Src/usbd_desc.c ****      LOBYTE(USBD_LANGID_STRING),
 223:Core/Src/usbd_desc.c ****      HIBYTE(USBD_LANGID_STRING)
 224:Core/Src/usbd_desc.c **** };
 225:Core/Src/usbd_desc.c **** 
 226:Core/Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 227:Core/Src/usbd_desc.c ****   #pragma data_alignment=4
 228:Core/Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 229:Core/Src/usbd_desc.c **** /* Internal string descriptor. */
 230:Core/Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
 231:Core/Src/usbd_desc.c **** 
 232:Core/Src/usbd_desc.c **** /**
 233:Core/Src/usbd_desc.c ****   * @}
 234:Core/Src/usbd_desc.c ****   */
 235:Core/Src/usbd_desc.c **** 
 236:Core/Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Functions USBD_DESC_Private_Functions
 237:Core/Src/usbd_desc.c ****   * @brief Private functions.
 238:Core/Src/usbd_desc.c ****   * @{
 239:Core/Src/usbd_desc.c ****   */
 240:Core/Src/usbd_desc.c **** 
 241:Core/Src/usbd_desc.c **** /**
 242:Core/Src/usbd_desc.c ****   * @brief  Return the device descriptor
 243:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 244:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 245:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 246:Core/Src/usbd_desc.c ****   */
 247:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 248:Core/Src/usbd_desc.c **** {
  28              		.loc 1 248 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 249:Core/Src/usbd_desc.c ****   *length = sizeof(USBD_FS_DeviceDesc);
  33              		.loc 1 249 3 view .LVU1
  34              		.loc 1 249 11 is_stmt 0 view .LVU2
  35 0000 1223     		movs	r3, #18
  36 0002 0B80     		strh	r3, [r1]
 250:Core/Src/usbd_desc.c ****   return USBD_FS_DeviceDesc;
ARM GAS  /tmp/ccC0M2jY.s 			page 6


  37              		.loc 1 250 3 is_stmt 1 view .LVU3
 251:Core/Src/usbd_desc.c **** }
  38              		.loc 1 251 1 is_stmt 0 view .LVU4
  39 0004 0048     		ldr	r0, .L2
  40              	.LVL1:
  41              		.loc 1 251 1 view .LVU5
  42              		@ sp needed
  43 0006 7047     		bx	lr
  44              	.L3:
  45              		.align	2
  46              	.L2:
  47 0008 00000000 		.word	.LANCHOR0
  48              		.cfi_endproc
  49              	.LFE43:
  51              		.section	.text.USBD_FS_LangIDStrDescriptor,"ax",%progbits
  52              		.align	1
  53              		.global	USBD_FS_LangIDStrDescriptor
  54              		.syntax unified
  55              		.code	16
  56              		.thumb_func
  57              		.fpu softvfp
  59              	USBD_FS_LangIDStrDescriptor:
  60              	.LVL2:
  61              	.LFB44:
 252:Core/Src/usbd_desc.c **** 
 253:Core/Src/usbd_desc.c **** /**
 254:Core/Src/usbd_desc.c ****   * @brief  Return the LangID string descriptor
 255:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 256:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 257:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 258:Core/Src/usbd_desc.c ****   */
 259:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 260:Core/Src/usbd_desc.c **** {
  62              		.loc 1 260 1 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 261:Core/Src/usbd_desc.c ****   *length = sizeof(USBD_LangIDDesc);
  67              		.loc 1 261 3 view .LVU7
  68              		.loc 1 261 11 is_stmt 0 view .LVU8
  69 0000 0423     		movs	r3, #4
  70 0002 0B80     		strh	r3, [r1]
 262:Core/Src/usbd_desc.c ****   return USBD_LangIDDesc;
  71              		.loc 1 262 3 is_stmt 1 view .LVU9
 263:Core/Src/usbd_desc.c **** }
  72              		.loc 1 263 1 is_stmt 0 view .LVU10
  73 0004 0048     		ldr	r0, .L5
  74              	.LVL3:
  75              		.loc 1 263 1 view .LVU11
  76              		@ sp needed
  77 0006 7047     		bx	lr
  78              	.L6:
  79              		.align	2
  80              	.L5:
  81 0008 00000000 		.word	.LANCHOR1
  82              		.cfi_endproc
ARM GAS  /tmp/ccC0M2jY.s 			page 7


  83              	.LFE44:
  85              		.section	.rodata.USBD_FS_ProductStrDescriptor.str1.4,"aMS",%progbits,1
  86              		.align	2
  87              	.LC3:
  88 0000 6F747465 		.ascii	"otterlinear keyboard\000"
  88      726C696E 
  88      65617220 
  88      6B657962 
  88      6F617264 
  89              		.section	.text.USBD_FS_ProductStrDescriptor,"ax",%progbits
  90              		.align	1
  91              		.global	USBD_FS_ProductStrDescriptor
  92              		.syntax unified
  93              		.code	16
  94              		.thumb_func
  95              		.fpu softvfp
  97              	USBD_FS_ProductStrDescriptor:
  98              	.LVL4:
  99              	.LFB45:
 264:Core/Src/usbd_desc.c **** 
 265:Core/Src/usbd_desc.c **** /**
 266:Core/Src/usbd_desc.c ****   * @brief  Return the product string descriptor
 267:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 268:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 269:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 270:Core/Src/usbd_desc.c ****   */
 271:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 272:Core/Src/usbd_desc.c **** {
 100              		.loc 1 272 1 is_stmt 1 view -0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		.loc 1 272 1 is_stmt 0 view .LVU13
 105 0000 10B5     		push	{r4, lr}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 4, -8
 109              		.cfi_offset 14, -4
 110 0002 0A00     		movs	r2, r1
 273:Core/Src/usbd_desc.c ****   if(speed == 0)
 111              		.loc 1 273 3 is_stmt 1 view .LVU14
 112              		.loc 1 273 5 is_stmt 0 view .LVU15
 113 0004 0028     		cmp	r0, #0
 114 0006 05D1     		bne	.L8
 274:Core/Src/usbd_desc.c ****   {
 275:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 115              		.loc 1 275 5 is_stmt 1 view .LVU16
 116 0008 0549     		ldr	r1, .L10
 117              	.LVL5:
 118              		.loc 1 275 5 is_stmt 0 view .LVU17
 119 000a 0648     		ldr	r0, .L10+4
 120              	.LVL6:
 121              		.loc 1 275 5 view .LVU18
 122 000c FFF7FEFF 		bl	USBD_GetString
 123              	.LVL7:
 124              	.L9:
 276:Core/Src/usbd_desc.c ****   }
ARM GAS  /tmp/ccC0M2jY.s 			page 8


 277:Core/Src/usbd_desc.c ****   else
 278:Core/Src/usbd_desc.c ****   {
 279:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 280:Core/Src/usbd_desc.c ****   }
 281:Core/Src/usbd_desc.c ****   return USBD_StrDesc;
 125              		.loc 1 281 3 is_stmt 1 view .LVU19
 282:Core/Src/usbd_desc.c **** }
 126              		.loc 1 282 1 is_stmt 0 view .LVU20
 127 0010 0348     		ldr	r0, .L10
 128              		@ sp needed
 129 0012 10BD     		pop	{r4, pc}
 130              	.LVL8:
 131              	.L8:
 279:Core/Src/usbd_desc.c ****   }
 132              		.loc 1 279 5 is_stmt 1 view .LVU21
 133 0014 0249     		ldr	r1, .L10
 134              	.LVL9:
 279:Core/Src/usbd_desc.c ****   }
 135              		.loc 1 279 5 is_stmt 0 view .LVU22
 136 0016 0348     		ldr	r0, .L10+4
 137              	.LVL10:
 279:Core/Src/usbd_desc.c ****   }
 138              		.loc 1 279 5 view .LVU23
 139 0018 FFF7FEFF 		bl	USBD_GetString
 140              	.LVL11:
 279:Core/Src/usbd_desc.c ****   }
 141              		.loc 1 279 5 view .LVU24
 142 001c F8E7     		b	.L9
 143              	.L11:
 144 001e C046     		.align	2
 145              	.L10:
 146 0020 00000000 		.word	USBD_StrDesc
 147 0024 00000000 		.word	.LC3
 148              		.cfi_endproc
 149              	.LFE45:
 151              		.section	.rodata.USBD_FS_ManufacturerStrDescriptor.str1.4,"aMS",%progbits,1
 152              		.align	2
 153              	.LC6:
 154 0000 6D767300 		.ascii	"mvs\000"
 155              		.section	.text.USBD_FS_ManufacturerStrDescriptor,"ax",%progbits
 156              		.align	1
 157              		.global	USBD_FS_ManufacturerStrDescriptor
 158              		.syntax unified
 159              		.code	16
 160              		.thumb_func
 161              		.fpu softvfp
 163              	USBD_FS_ManufacturerStrDescriptor:
 164              	.LVL12:
 165              	.LFB46:
 283:Core/Src/usbd_desc.c **** 
 284:Core/Src/usbd_desc.c **** /**
 285:Core/Src/usbd_desc.c ****   * @brief  Return the manufacturer string descriptor
 286:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 287:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 288:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 289:Core/Src/usbd_desc.c ****   */
 290:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
ARM GAS  /tmp/ccC0M2jY.s 			page 9


 291:Core/Src/usbd_desc.c **** {
 166              		.loc 1 291 1 is_stmt 1 view -0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		.loc 1 291 1 is_stmt 0 view .LVU26
 171 0000 10B5     		push	{r4, lr}
 172              	.LCFI1:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
 176 0002 0A00     		movs	r2, r1
 292:Core/Src/usbd_desc.c ****   USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 177              		.loc 1 292 3 is_stmt 1 view .LVU27
 178 0004 034C     		ldr	r4, .L13
 179 0006 2100     		movs	r1, r4
 180              	.LVL13:
 181              		.loc 1 292 3 is_stmt 0 view .LVU28
 182 0008 0348     		ldr	r0, .L13+4
 183              	.LVL14:
 184              		.loc 1 292 3 view .LVU29
 185 000a FFF7FEFF 		bl	USBD_GetString
 186              	.LVL15:
 293:Core/Src/usbd_desc.c ****   return USBD_StrDesc;
 187              		.loc 1 293 3 is_stmt 1 view .LVU30
 294:Core/Src/usbd_desc.c **** }
 188              		.loc 1 294 1 is_stmt 0 view .LVU31
 189 000e 2000     		movs	r0, r4
 190              		@ sp needed
 191 0010 10BD     		pop	{r4, pc}
 192              	.L14:
 193 0012 C046     		.align	2
 194              	.L13:
 195 0014 00000000 		.word	USBD_StrDesc
 196 0018 00000000 		.word	.LC6
 197              		.cfi_endproc
 198              	.LFE46:
 200              		.section	.rodata.USBD_FS_SerialStrDescriptor.str1.4,"aMS",%progbits,1
 201              		.align	2
 202              	.LC9:
 203 0000 30303030 		.ascii	"000000000001\000"
 203      30303030 
 203      30303031 
 203      00
 204              		.section	.text.USBD_FS_SerialStrDescriptor,"ax",%progbits
 205              		.align	1
 206              		.global	USBD_FS_SerialStrDescriptor
 207              		.syntax unified
 208              		.code	16
 209              		.thumb_func
 210              		.fpu softvfp
 212              	USBD_FS_SerialStrDescriptor:
 213              	.LVL16:
 214              	.LFB47:
 295:Core/Src/usbd_desc.c **** 
 296:Core/Src/usbd_desc.c **** /**
 297:Core/Src/usbd_desc.c ****   * @brief  Return the serial number string descriptor
ARM GAS  /tmp/ccC0M2jY.s 			page 10


 298:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 299:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 300:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 301:Core/Src/usbd_desc.c ****   */
 302:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 303:Core/Src/usbd_desc.c **** {
 215              		.loc 1 303 1 is_stmt 1 view -0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		.loc 1 303 1 is_stmt 0 view .LVU33
 220 0000 10B5     		push	{r4, lr}
 221              	.LCFI2:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 4, -8
 224              		.cfi_offset 14, -4
 225 0002 0A00     		movs	r2, r1
 304:Core/Src/usbd_desc.c ****   if(speed == USBD_SPEED_HIGH)
 226              		.loc 1 304 3 is_stmt 1 view .LVU34
 227              		.loc 1 304 5 is_stmt 0 view .LVU35
 228 0004 0028     		cmp	r0, #0
 229 0006 05D1     		bne	.L16
 305:Core/Src/usbd_desc.c ****   {
 306:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 230              		.loc 1 306 5 is_stmt 1 view .LVU36
 231 0008 0549     		ldr	r1, .L18
 232              	.LVL17:
 233              		.loc 1 306 5 is_stmt 0 view .LVU37
 234 000a 0648     		ldr	r0, .L18+4
 235              	.LVL18:
 236              		.loc 1 306 5 view .LVU38
 237 000c FFF7FEFF 		bl	USBD_GetString
 238              	.LVL19:
 239              	.L17:
 307:Core/Src/usbd_desc.c ****   }
 308:Core/Src/usbd_desc.c ****   else
 309:Core/Src/usbd_desc.c ****   {
 310:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 311:Core/Src/usbd_desc.c ****   }
 312:Core/Src/usbd_desc.c ****   return USBD_StrDesc;
 240              		.loc 1 312 3 is_stmt 1 view .LVU39
 313:Core/Src/usbd_desc.c **** }
 241              		.loc 1 313 1 is_stmt 0 view .LVU40
 242 0010 0348     		ldr	r0, .L18
 243              		@ sp needed
 244 0012 10BD     		pop	{r4, pc}
 245              	.LVL20:
 246              	.L16:
 310:Core/Src/usbd_desc.c ****   }
 247              		.loc 1 310 5 is_stmt 1 view .LVU41
 248 0014 0249     		ldr	r1, .L18
 249              	.LVL21:
 310:Core/Src/usbd_desc.c ****   }
 250              		.loc 1 310 5 is_stmt 0 view .LVU42
 251 0016 0348     		ldr	r0, .L18+4
 252              	.LVL22:
 310:Core/Src/usbd_desc.c ****   }
ARM GAS  /tmp/ccC0M2jY.s 			page 11


 253              		.loc 1 310 5 view .LVU43
 254 0018 FFF7FEFF 		bl	USBD_GetString
 255              	.LVL23:
 310:Core/Src/usbd_desc.c ****   }
 256              		.loc 1 310 5 view .LVU44
 257 001c F8E7     		b	.L17
 258              	.L19:
 259 001e C046     		.align	2
 260              	.L18:
 261 0020 00000000 		.word	USBD_StrDesc
 262 0024 00000000 		.word	.LC9
 263              		.cfi_endproc
 264              	.LFE47:
 266              		.section	.rodata.USBD_FS_ConfigStrDescriptor.str1.4,"aMS",%progbits,1
 267              		.align	2
 268              	.LC12:
 269 0000 48494420 		.ascii	"HID Config\000"
 269      436F6E66 
 269      696700
 270              		.section	.text.USBD_FS_ConfigStrDescriptor,"ax",%progbits
 271              		.align	1
 272              		.global	USBD_FS_ConfigStrDescriptor
 273              		.syntax unified
 274              		.code	16
 275              		.thumb_func
 276              		.fpu softvfp
 278              	USBD_FS_ConfigStrDescriptor:
 279              	.LVL24:
 280              	.LFB48:
 314:Core/Src/usbd_desc.c **** 
 315:Core/Src/usbd_desc.c **** /**
 316:Core/Src/usbd_desc.c ****   * @brief  Return the configuration string descriptor
 317:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 318:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 319:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 320:Core/Src/usbd_desc.c ****   */
 321:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 322:Core/Src/usbd_desc.c **** {
 281              		.loc 1 322 1 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		.loc 1 322 1 is_stmt 0 view .LVU46
 286 0000 10B5     		push	{r4, lr}
 287              	.LCFI3:
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 4, -8
 290              		.cfi_offset 14, -4
 291 0002 0A00     		movs	r2, r1
 323:Core/Src/usbd_desc.c ****   if(speed == USBD_SPEED_HIGH)
 292              		.loc 1 323 3 is_stmt 1 view .LVU47
 293              		.loc 1 323 5 is_stmt 0 view .LVU48
 294 0004 0028     		cmp	r0, #0
 295 0006 05D1     		bne	.L21
 324:Core/Src/usbd_desc.c ****   {
 325:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 296              		.loc 1 325 5 is_stmt 1 view .LVU49
ARM GAS  /tmp/ccC0M2jY.s 			page 12


 297 0008 0549     		ldr	r1, .L23
 298              	.LVL25:
 299              		.loc 1 325 5 is_stmt 0 view .LVU50
 300 000a 0648     		ldr	r0, .L23+4
 301              	.LVL26:
 302              		.loc 1 325 5 view .LVU51
 303 000c FFF7FEFF 		bl	USBD_GetString
 304              	.LVL27:
 305              	.L22:
 326:Core/Src/usbd_desc.c ****   }
 327:Core/Src/usbd_desc.c ****   else
 328:Core/Src/usbd_desc.c ****   {
 329:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 330:Core/Src/usbd_desc.c ****   }
 331:Core/Src/usbd_desc.c ****   return USBD_StrDesc;
 306              		.loc 1 331 3 is_stmt 1 view .LVU52
 332:Core/Src/usbd_desc.c **** }
 307              		.loc 1 332 1 is_stmt 0 view .LVU53
 308 0010 0348     		ldr	r0, .L23
 309              		@ sp needed
 310 0012 10BD     		pop	{r4, pc}
 311              	.LVL28:
 312              	.L21:
 329:Core/Src/usbd_desc.c ****   }
 313              		.loc 1 329 5 is_stmt 1 view .LVU54
 314 0014 0249     		ldr	r1, .L23
 315              	.LVL29:
 329:Core/Src/usbd_desc.c ****   }
 316              		.loc 1 329 5 is_stmt 0 view .LVU55
 317 0016 0348     		ldr	r0, .L23+4
 318              	.LVL30:
 329:Core/Src/usbd_desc.c ****   }
 319              		.loc 1 329 5 view .LVU56
 320 0018 FFF7FEFF 		bl	USBD_GetString
 321              	.LVL31:
 329:Core/Src/usbd_desc.c ****   }
 322              		.loc 1 329 5 view .LVU57
 323 001c F8E7     		b	.L22
 324              	.L24:
 325 001e C046     		.align	2
 326              	.L23:
 327 0020 00000000 		.word	USBD_StrDesc
 328 0024 00000000 		.word	.LC12
 329              		.cfi_endproc
 330              	.LFE48:
 332              		.section	.rodata.USBD_FS_InterfaceStrDescriptor.str1.4,"aMS",%progbits,1
 333              		.align	2
 334              	.LC15:
 335 0000 48494420 		.ascii	"HID Interface\000"
 335      496E7465 
 335      72666163 
 335      6500
 336              		.section	.text.USBD_FS_InterfaceStrDescriptor,"ax",%progbits
 337              		.align	1
 338              		.global	USBD_FS_InterfaceStrDescriptor
 339              		.syntax unified
 340              		.code	16
ARM GAS  /tmp/ccC0M2jY.s 			page 13


 341              		.thumb_func
 342              		.fpu softvfp
 344              	USBD_FS_InterfaceStrDescriptor:
 345              	.LVL32:
 346              	.LFB49:
 333:Core/Src/usbd_desc.c **** 
 334:Core/Src/usbd_desc.c **** /**
 335:Core/Src/usbd_desc.c ****   * @brief  Return the interface string descriptor
 336:Core/Src/usbd_desc.c ****   * @param  speed : Current device speed
 337:Core/Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 338:Core/Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 339:Core/Src/usbd_desc.c ****   */
 340:Core/Src/usbd_desc.c **** uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 341:Core/Src/usbd_desc.c **** {
 347              		.loc 1 341 1 is_stmt 1 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		.loc 1 341 1 is_stmt 0 view .LVU59
 352 0000 10B5     		push	{r4, lr}
 353              	.LCFI4:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 4, -8
 356              		.cfi_offset 14, -4
 357 0002 0A00     		movs	r2, r1
 342:Core/Src/usbd_desc.c ****   if(speed == 0)
 358              		.loc 1 342 3 is_stmt 1 view .LVU60
 359              		.loc 1 342 5 is_stmt 0 view .LVU61
 360 0004 0028     		cmp	r0, #0
 361 0006 05D1     		bne	.L26
 343:Core/Src/usbd_desc.c ****   {
 344:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 362              		.loc 1 344 5 is_stmt 1 view .LVU62
 363 0008 0549     		ldr	r1, .L28
 364              	.LVL33:
 365              		.loc 1 344 5 is_stmt 0 view .LVU63
 366 000a 0648     		ldr	r0, .L28+4
 367              	.LVL34:
 368              		.loc 1 344 5 view .LVU64
 369 000c FFF7FEFF 		bl	USBD_GetString
 370              	.LVL35:
 371              	.L27:
 345:Core/Src/usbd_desc.c ****   }
 346:Core/Src/usbd_desc.c ****   else
 347:Core/Src/usbd_desc.c ****   {
 348:Core/Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 349:Core/Src/usbd_desc.c ****   }
 350:Core/Src/usbd_desc.c ****   return USBD_StrDesc;
 372              		.loc 1 350 3 is_stmt 1 view .LVU65
 351:Core/Src/usbd_desc.c **** }
 373              		.loc 1 351 1 is_stmt 0 view .LVU66
 374 0010 0348     		ldr	r0, .L28
 375              		@ sp needed
 376 0012 10BD     		pop	{r4, pc}
 377              	.LVL36:
 378              	.L26:
 348:Core/Src/usbd_desc.c ****   }
ARM GAS  /tmp/ccC0M2jY.s 			page 14


 379              		.loc 1 348 5 is_stmt 1 view .LVU67
 380 0014 0249     		ldr	r1, .L28
 381              	.LVL37:
 348:Core/Src/usbd_desc.c ****   }
 382              		.loc 1 348 5 is_stmt 0 view .LVU68
 383 0016 0348     		ldr	r0, .L28+4
 384              	.LVL38:
 348:Core/Src/usbd_desc.c ****   }
 385              		.loc 1 348 5 view .LVU69
 386 0018 FFF7FEFF 		bl	USBD_GetString
 387              	.LVL39:
 348:Core/Src/usbd_desc.c ****   }
 388              		.loc 1 348 5 view .LVU70
 389 001c F8E7     		b	.L27
 390              	.L29:
 391 001e C046     		.align	2
 392              	.L28:
 393 0020 00000000 		.word	USBD_StrDesc
 394 0024 00000000 		.word	.LC15
 395              		.cfi_endproc
 396              	.LFE49:
 398              		.comm	USBD_StrDesc,512,4
 399              		.global	USBD_LangIDDesc
 400              		.global	USBD_FS_DeviceDesc
 401              		.global	FS_Desc
 402              		.section	.data.FS_Desc,"aw"
 403              		.align	2
 406              	FS_Desc:
 407 0000 00000000 		.word	USBD_FS_DeviceDescriptor
 408 0004 00000000 		.word	USBD_FS_LangIDStrDescriptor
 409 0008 00000000 		.word	USBD_FS_ManufacturerStrDescriptor
 410 000c 00000000 		.word	USBD_FS_ProductStrDescriptor
 411 0010 00000000 		.word	USBD_FS_SerialStrDescriptor
 412 0014 00000000 		.word	USBD_FS_ConfigStrDescriptor
 413 0018 00000000 		.word	USBD_FS_InterfaceStrDescriptor
 414              		.section	.data.USBD_FS_DeviceDesc,"aw"
 415              		.align	2
 416              		.set	.LANCHOR0,. + 0
 419              	USBD_FS_DeviceDesc:
 420 0000 12010002 		.ascii	"\022\001\000\002\002\002\000@\3773%@\000\002\001\002"
 420      02020040 
 420      FF332540 
 420      00020102 
 421 0010 0301     		.ascii	"\003\001"
 422              		.section	.data.USBD_LangIDDesc,"aw"
 423              		.align	2
 424              		.set	.LANCHOR1,. + 0
 427              	USBD_LangIDDesc:
 428 0000 04031104 		.ascii	"\004\003\021\004"
 429              		.text
 430              	.Letext0:
 431              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 432              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 433              		.file 4 "/usr/include/newlib/sys/_types.h"
 434              		.file 5 "/usr/include/newlib/sys/reent.h"
 435              		.file 6 "/usr/include/newlib/sys/lock.h"
 436              		.file 7 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/ccC0M2jY.s 			page 15


 437              		.file 8 "/usr/include/newlib/stdlib.h"
 438              		.file 9 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 439              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 440              		.file 11 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 441              		.file 12 "Core/Inc/usbd_desc.h"
 442              		.file 13 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h"
ARM GAS  /tmp/ccC0M2jY.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_desc.c
     /tmp/ccC0M2jY.s:16     .text.USBD_FS_DeviceDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:24     .text.USBD_FS_DeviceDescriptor:0000000000000000 USBD_FS_DeviceDescriptor
     /tmp/ccC0M2jY.s:47     .text.USBD_FS_DeviceDescriptor:0000000000000008 $d
     /tmp/ccC0M2jY.s:52     .text.USBD_FS_LangIDStrDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:59     .text.USBD_FS_LangIDStrDescriptor:0000000000000000 USBD_FS_LangIDStrDescriptor
     /tmp/ccC0M2jY.s:81     .text.USBD_FS_LangIDStrDescriptor:0000000000000008 $d
     /tmp/ccC0M2jY.s:86     .rodata.USBD_FS_ProductStrDescriptor.str1.4:0000000000000000 $d
     /tmp/ccC0M2jY.s:90     .text.USBD_FS_ProductStrDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:97     .text.USBD_FS_ProductStrDescriptor:0000000000000000 USBD_FS_ProductStrDescriptor
     /tmp/ccC0M2jY.s:146    .text.USBD_FS_ProductStrDescriptor:0000000000000020 $d
                            *COM*:0000000000000200 USBD_StrDesc
     /tmp/ccC0M2jY.s:152    .rodata.USBD_FS_ManufacturerStrDescriptor.str1.4:0000000000000000 $d
     /tmp/ccC0M2jY.s:156    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:163    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000000 USBD_FS_ManufacturerStrDescriptor
     /tmp/ccC0M2jY.s:195    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000014 $d
     /tmp/ccC0M2jY.s:201    .rodata.USBD_FS_SerialStrDescriptor.str1.4:0000000000000000 $d
     /tmp/ccC0M2jY.s:205    .text.USBD_FS_SerialStrDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:212    .text.USBD_FS_SerialStrDescriptor:0000000000000000 USBD_FS_SerialStrDescriptor
     /tmp/ccC0M2jY.s:261    .text.USBD_FS_SerialStrDescriptor:0000000000000020 $d
     /tmp/ccC0M2jY.s:267    .rodata.USBD_FS_ConfigStrDescriptor.str1.4:0000000000000000 $d
     /tmp/ccC0M2jY.s:271    .text.USBD_FS_ConfigStrDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:278    .text.USBD_FS_ConfigStrDescriptor:0000000000000000 USBD_FS_ConfigStrDescriptor
     /tmp/ccC0M2jY.s:327    .text.USBD_FS_ConfigStrDescriptor:0000000000000020 $d
     /tmp/ccC0M2jY.s:333    .rodata.USBD_FS_InterfaceStrDescriptor.str1.4:0000000000000000 $d
     /tmp/ccC0M2jY.s:337    .text.USBD_FS_InterfaceStrDescriptor:0000000000000000 $t
     /tmp/ccC0M2jY.s:344    .text.USBD_FS_InterfaceStrDescriptor:0000000000000000 USBD_FS_InterfaceStrDescriptor
     /tmp/ccC0M2jY.s:393    .text.USBD_FS_InterfaceStrDescriptor:0000000000000020 $d
     /tmp/ccC0M2jY.s:427    .data.USBD_LangIDDesc:0000000000000000 USBD_LangIDDesc
     /tmp/ccC0M2jY.s:419    .data.USBD_FS_DeviceDesc:0000000000000000 USBD_FS_DeviceDesc
     /tmp/ccC0M2jY.s:406    .data.FS_Desc:0000000000000000 FS_Desc
     /tmp/ccC0M2jY.s:403    .data.FS_Desc:0000000000000000 $d
     /tmp/ccC0M2jY.s:415    .data.USBD_FS_DeviceDesc:0000000000000000 $d
     /tmp/ccC0M2jY.s:423    .data.USBD_LangIDDesc:0000000000000000 $d

UNDEFINED SYMBOLS
USBD_GetString
