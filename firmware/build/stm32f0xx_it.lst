ARM GAS  /tmp/ccKce3fF.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB40:
  26              		.file 1 "Core/Src/stm32f0xx_it.c"
   1:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f0xx_it.c **** /**
   3:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Core/Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f0xx_it.c ****   * @attention
   8:Core/Src/stm32f0xx_it.c ****   *
   9:Core/Src/stm32f0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32f0xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f0xx_it.c ****   *
  12:Core/Src/stm32f0xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32f0xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32f0xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32f0xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32f0xx_it.c ****   *
  17:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f0xx_it.c ****   */
  19:Core/Src/stm32f0xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f0xx_it.c **** 
  21:Core/Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f0xx_it.c **** #include "main.h"
  23:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  24:Core/Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f0xx_it.c **** 
  28:Core/Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f0xx_it.c **** 
  31:Core/Src/stm32f0xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f0xx_it.c **** 
ARM GAS  /tmp/ccKce3fF.s 			page 2


  33:Core/Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f0xx_it.c **** 
  36:Core/Src/stm32f0xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f0xx_it.c **** 
  38:Core/Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f0xx_it.c **** 
  41:Core/Src/stm32f0xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f0xx_it.c **** 
  43:Core/Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f0xx_it.c **** 
  46:Core/Src/stm32f0xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f0xx_it.c **** 
  48:Core/Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f0xx_it.c **** 
  51:Core/Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f0xx_it.c **** 
  53:Core/Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f0xx_it.c **** 
  56:Core/Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f0xx_it.c **** 
  58:Core/Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f0xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  60:Core/Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_tim1_ch1;
  61:Core/Src/stm32f0xx_it.c **** extern DMA_HandleTypeDef hdma_tim1_ch3_up;
  62:Core/Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim1;
  63:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32f0xx_it.c **** 
  65:Core/Src/stm32f0xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32f0xx_it.c **** 
  67:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32f0xx_it.c **** /**
  71:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32f0xx_it.c ****   */
  73:Core/Src/stm32f0xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32f0xx_it.c **** {
  27              		.loc 1 74 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  75:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32f0xx_it.c **** 
  77:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32f0xx_it.c ****   while (1)
  34              		.loc 1 79 3 discriminator 1 view .LVU1
  80:Core/Src/stm32f0xx_it.c ****   {
  81:Core/Src/stm32f0xx_it.c ****   }
ARM GAS  /tmp/ccKce3fF.s 			page 3


  35              		.loc 1 81 3 discriminator 1 view .LVU2
  79:Core/Src/stm32f0xx_it.c ****   {
  36              		.loc 1 79 9 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE40:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.code	16
  46              		.thumb_func
  47              		.fpu softvfp
  49              	HardFault_Handler:
  50              	.LFB41:
  82:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32f0xx_it.c **** }
  84:Core/Src/stm32f0xx_it.c **** 
  85:Core/Src/stm32f0xx_it.c **** /**
  86:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32f0xx_it.c ****   */
  88:Core/Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32f0xx_it.c **** {
  51              		.loc 1 89 1 view -0
  52              		.cfi_startproc
  53              		@ Volatile: function does not return.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.L4:
  90:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32f0xx_it.c **** 
  92:Core/Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32f0xx_it.c ****   while (1)
  58              		.loc 1 93 3 discriminator 1 view .LVU5
  94:Core/Src/stm32f0xx_it.c ****   {
  95:Core/Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f0xx_it.c ****   }
  59              		.loc 1 97 3 discriminator 1 view .LVU6
  93:Core/Src/stm32f0xx_it.c ****   {
  60              		.loc 1 93 9 discriminator 1 view .LVU7
  61 0000 FEE7     		b	.L4
  62              		.cfi_endproc
  63              	.LFE41:
  65              		.section	.text.SVC_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	SVC_Handler
  68              		.syntax unified
  69              		.code	16
  70              		.thumb_func
  71              		.fpu softvfp
  73              	SVC_Handler:
  74              	.LFB42:
  98:Core/Src/stm32f0xx_it.c **** }
  99:Core/Src/stm32f0xx_it.c **** 
 100:Core/Src/stm32f0xx_it.c **** /**
ARM GAS  /tmp/ccKce3fF.s 			page 4


 101:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 102:Core/Src/stm32f0xx_it.c ****   */
 103:Core/Src/stm32f0xx_it.c **** void SVC_Handler(void)
 104:Core/Src/stm32f0xx_it.c **** {
  75              		.loc 1 104 1 view -0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
 105:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 106:Core/Src/stm32f0xx_it.c **** 
 107:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 108:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 109:Core/Src/stm32f0xx_it.c **** 
 110:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 111:Core/Src/stm32f0xx_it.c **** }
  80              		.loc 1 111 1 view .LVU9
  81              		@ sp needed
  82 0000 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE42:
  86              		.section	.text.PendSV_Handler,"ax",%progbits
  87              		.align	1
  88              		.global	PendSV_Handler
  89              		.syntax unified
  90              		.code	16
  91              		.thumb_func
  92              		.fpu softvfp
  94              	PendSV_Handler:
  95              	.LFB43:
 112:Core/Src/stm32f0xx_it.c **** 
 113:Core/Src/stm32f0xx_it.c **** /**
 114:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 115:Core/Src/stm32f0xx_it.c ****   */
 116:Core/Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 117:Core/Src/stm32f0xx_it.c **** {
  96              		.loc 1 117 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 118:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 119:Core/Src/stm32f0xx_it.c **** 
 120:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 121:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 122:Core/Src/stm32f0xx_it.c **** 
 123:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 124:Core/Src/stm32f0xx_it.c **** }
 101              		.loc 1 124 1 view .LVU11
 102              		@ sp needed
 103 0000 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE43:
 107              		.section	.text.SysTick_Handler,"ax",%progbits
 108              		.align	1
 109              		.global	SysTick_Handler
 110              		.syntax unified
ARM GAS  /tmp/ccKce3fF.s 			page 5


 111              		.code	16
 112              		.thumb_func
 113              		.fpu softvfp
 115              	SysTick_Handler:
 116              	.LFB44:
 125:Core/Src/stm32f0xx_it.c **** 
 126:Core/Src/stm32f0xx_it.c **** /**
 127:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 128:Core/Src/stm32f0xx_it.c ****   */
 129:Core/Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 130:Core/Src/stm32f0xx_it.c **** {
 117              		.loc 1 130 1 view -0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121 0000 10B5     		push	{r4, lr}
 122              	.LCFI0:
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 4, -8
 125              		.cfi_offset 14, -4
 131:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 132:Core/Src/stm32f0xx_it.c **** 
 133:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 134:Core/Src/stm32f0xx_it.c ****   HAL_IncTick();
 126              		.loc 1 134 3 view .LVU13
 127 0002 FFF7FEFF 		bl	HAL_IncTick
 128              	.LVL0:
 135:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 136:Core/Src/stm32f0xx_it.c **** 
 137:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 138:Core/Src/stm32f0xx_it.c **** }
 129              		.loc 1 138 1 is_stmt 0 view .LVU14
 130              		@ sp needed
 131 0006 10BD     		pop	{r4, pc}
 132              		.cfi_endproc
 133              	.LFE44:
 135              		.section	.text.DMA1_Channel2_3_IRQHandler,"ax",%progbits
 136              		.align	1
 137              		.global	DMA1_Channel2_3_IRQHandler
 138              		.syntax unified
 139              		.code	16
 140              		.thumb_func
 141              		.fpu softvfp
 143              	DMA1_Channel2_3_IRQHandler:
 144              	.LFB45:
 139:Core/Src/stm32f0xx_it.c **** 
 140:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 141:Core/Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 142:Core/Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 143:Core/Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 144:Core/Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 145:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 146:Core/Src/stm32f0xx_it.c **** 
 147:Core/Src/stm32f0xx_it.c **** /**
 148:Core/Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 2 and 3 interrupts.
 149:Core/Src/stm32f0xx_it.c ****   */
 150:Core/Src/stm32f0xx_it.c **** void DMA1_Channel2_3_IRQHandler(void)
ARM GAS  /tmp/ccKce3fF.s 			page 6


 151:Core/Src/stm32f0xx_it.c **** {
 145              		.loc 1 151 1 is_stmt 1 view -0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149 0000 10B5     		push	{r4, lr}
 150              	.LCFI1:
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 4, -8
 153              		.cfi_offset 14, -4
 152:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
 153:Core/Src/stm32f0xx_it.c **** 
 154:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel2_3_IRQn 0 */
 155:Core/Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 154              		.loc 1 155 3 view .LVU16
 155 0002 0248     		ldr	r0, .L9
 156 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 157              	.LVL1:
 156:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
 157:Core/Src/stm32f0xx_it.c **** 
 158:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel2_3_IRQn 1 */
 159:Core/Src/stm32f0xx_it.c **** }
 158              		.loc 1 159 1 is_stmt 0 view .LVU17
 159              		@ sp needed
 160 0008 10BD     		pop	{r4, pc}
 161              	.L10:
 162 000a C046     		.align	2
 163              	.L9:
 164 000c 00000000 		.word	hdma_tim1_ch1
 165              		.cfi_endproc
 166              	.LFE45:
 168              		.section	.text.DMA1_Channel4_5_IRQHandler,"ax",%progbits
 169              		.align	1
 170              		.global	DMA1_Channel4_5_IRQHandler
 171              		.syntax unified
 172              		.code	16
 173              		.thumb_func
 174              		.fpu softvfp
 176              	DMA1_Channel4_5_IRQHandler:
 177              	.LFB46:
 160:Core/Src/stm32f0xx_it.c **** 
 161:Core/Src/stm32f0xx_it.c **** /**
 162:Core/Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 4 and 5 interrupts.
 163:Core/Src/stm32f0xx_it.c ****   */
 164:Core/Src/stm32f0xx_it.c **** void DMA1_Channel4_5_IRQHandler(void)
 165:Core/Src/stm32f0xx_it.c **** {
 178              		.loc 1 165 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182 0000 10B5     		push	{r4, lr}
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 166:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */
 167:Core/Src/stm32f0xx_it.c **** 
ARM GAS  /tmp/ccKce3fF.s 			page 7


 168:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel4_5_IRQn 0 */
 169:Core/Src/stm32f0xx_it.c ****   HAL_DMA_IRQHandler(&hdma_tim1_ch3_up);
 187              		.loc 1 169 3 view .LVU19
 188 0002 0248     		ldr	r0, .L12
 189 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 190              	.LVL2:
 170:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
 171:Core/Src/stm32f0xx_it.c **** 
 172:Core/Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel4_5_IRQn 1 */
 173:Core/Src/stm32f0xx_it.c **** }
 191              		.loc 1 173 1 is_stmt 0 view .LVU20
 192              		@ sp needed
 193 0008 10BD     		pop	{r4, pc}
 194              	.L13:
 195 000a C046     		.align	2
 196              	.L12:
 197 000c 00000000 		.word	hdma_tim1_ch3_up
 198              		.cfi_endproc
 199              	.LFE46:
 201              		.section	.text.TIM1_BRK_UP_TRG_COM_IRQHandler,"ax",%progbits
 202              		.align	1
 203              		.global	TIM1_BRK_UP_TRG_COM_IRQHandler
 204              		.syntax unified
 205              		.code	16
 206              		.thumb_func
 207              		.fpu softvfp
 209              	TIM1_BRK_UP_TRG_COM_IRQHandler:
 210              	.LFB47:
 174:Core/Src/stm32f0xx_it.c **** 
 175:Core/Src/stm32f0xx_it.c **** /**
 176:Core/Src/stm32f0xx_it.c ****   * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
 177:Core/Src/stm32f0xx_it.c ****   */
 178:Core/Src/stm32f0xx_it.c **** void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
 179:Core/Src/stm32f0xx_it.c **** {
 211              		.loc 1 179 1 is_stmt 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215 0000 10B5     		push	{r4, lr}
 216              	.LCFI3:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 180:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
 181:Core/Src/stm32f0xx_it.c **** 
 182:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
 183:Core/Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 220              		.loc 1 183 3 view .LVU22
 221 0002 0248     		ldr	r0, .L15
 222 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 223              	.LVL3:
 184:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
 185:Core/Src/stm32f0xx_it.c **** 
 186:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
 187:Core/Src/stm32f0xx_it.c **** }
 224              		.loc 1 187 1 is_stmt 0 view .LVU23
 225              		@ sp needed
ARM GAS  /tmp/ccKce3fF.s 			page 8


 226 0008 10BD     		pop	{r4, pc}
 227              	.L16:
 228 000a C046     		.align	2
 229              	.L15:
 230 000c 00000000 		.word	htim1
 231              		.cfi_endproc
 232              	.LFE47:
 234              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 235              		.align	1
 236              		.global	TIM1_CC_IRQHandler
 237              		.syntax unified
 238              		.code	16
 239              		.thumb_func
 240              		.fpu softvfp
 242              	TIM1_CC_IRQHandler:
 243              	.LFB48:
 188:Core/Src/stm32f0xx_it.c **** 
 189:Core/Src/stm32f0xx_it.c **** /**
 190:Core/Src/stm32f0xx_it.c ****   * @brief This function handles TIM1 capture compare interrupt.
 191:Core/Src/stm32f0xx_it.c ****   */
 192:Core/Src/stm32f0xx_it.c **** void TIM1_CC_IRQHandler(void)
 193:Core/Src/stm32f0xx_it.c **** {
 244              		.loc 1 193 1 is_stmt 1 view -0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248 0000 10B5     		push	{r4, lr}
 249              	.LCFI4:
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 4, -8
 252              		.cfi_offset 14, -4
 194:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 195:Core/Src/stm32f0xx_it.c **** 
 196:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 0 */
 197:Core/Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 253              		.loc 1 197 3 view .LVU25
 254 0002 0248     		ldr	r0, .L18
 255 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 256              	.LVL4:
 198:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 199:Core/Src/stm32f0xx_it.c **** 
 200:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 1 */
 201:Core/Src/stm32f0xx_it.c **** }
 257              		.loc 1 201 1 is_stmt 0 view .LVU26
 258              		@ sp needed
 259 0008 10BD     		pop	{r4, pc}
 260              	.L19:
 261 000a C046     		.align	2
 262              	.L18:
 263 000c 00000000 		.word	htim1
 264              		.cfi_endproc
 265              	.LFE48:
 267              		.section	.text.USB_IRQHandler,"ax",%progbits
 268              		.align	1
 269              		.global	USB_IRQHandler
 270              		.syntax unified
 271              		.code	16
ARM GAS  /tmp/ccKce3fF.s 			page 9


 272              		.thumb_func
 273              		.fpu softvfp
 275              	USB_IRQHandler:
 276              	.LFB49:
 202:Core/Src/stm32f0xx_it.c **** 
 203:Core/Src/stm32f0xx_it.c **** /**
 204:Core/Src/stm32f0xx_it.c ****   * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
 205:Core/Src/stm32f0xx_it.c ****   */
 206:Core/Src/stm32f0xx_it.c **** void USB_IRQHandler(void)
 207:Core/Src/stm32f0xx_it.c **** {
 277              		.loc 1 207 1 is_stmt 1 view -0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281 0000 10B5     		push	{r4, lr}
 282              	.LCFI5:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 208:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 0 */
 209:Core/Src/stm32f0xx_it.c **** 
 210:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USB_IRQn 0 */
 211:Core/Src/stm32f0xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 286              		.loc 1 211 3 view .LVU28
 287 0002 0248     		ldr	r0, .L21
 288 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 289              	.LVL5:
 212:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 1 */
 213:Core/Src/stm32f0xx_it.c **** 
 214:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USB_IRQn 1 */
 215:Core/Src/stm32f0xx_it.c **** }
 290              		.loc 1 215 1 is_stmt 0 view .LVU29
 291              		@ sp needed
 292 0008 10BD     		pop	{r4, pc}
 293              	.L22:
 294 000a C046     		.align	2
 295              	.L21:
 296 000c 00000000 		.word	hpcd_USB_FS
 297              		.cfi_endproc
 298              	.LFE49:
 300              		.text
 301              	.Letext0:
 302              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 303              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 304              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 305              		.file 5 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 306              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 307              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 308              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 309              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 310              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccKce3fF.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_it.c
     /tmp/ccKce3fF.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccKce3fF.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccKce3fF.s:42     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccKce3fF.s:49     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccKce3fF.s:66     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccKce3fF.s:73     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccKce3fF.s:87     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccKce3fF.s:94     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccKce3fF.s:108    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccKce3fF.s:115    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccKce3fF.s:136    .text.DMA1_Channel2_3_IRQHandler:0000000000000000 $t
     /tmp/ccKce3fF.s:143    .text.DMA1_Channel2_3_IRQHandler:0000000000000000 DMA1_Channel2_3_IRQHandler
     /tmp/ccKce3fF.s:164    .text.DMA1_Channel2_3_IRQHandler:000000000000000c $d
     /tmp/ccKce3fF.s:169    .text.DMA1_Channel4_5_IRQHandler:0000000000000000 $t
     /tmp/ccKce3fF.s:176    .text.DMA1_Channel4_5_IRQHandler:0000000000000000 DMA1_Channel4_5_IRQHandler
     /tmp/ccKce3fF.s:197    .text.DMA1_Channel4_5_IRQHandler:000000000000000c $d
     /tmp/ccKce3fF.s:202    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 $t
     /tmp/ccKce3fF.s:209    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 TIM1_BRK_UP_TRG_COM_IRQHandler
     /tmp/ccKce3fF.s:230    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:000000000000000c $d
     /tmp/ccKce3fF.s:235    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/ccKce3fF.s:242    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccKce3fF.s:263    .text.TIM1_CC_IRQHandler:000000000000000c $d
     /tmp/ccKce3fF.s:268    .text.USB_IRQHandler:0000000000000000 $t
     /tmp/ccKce3fF.s:275    .text.USB_IRQHandler:0000000000000000 USB_IRQHandler
     /tmp/ccKce3fF.s:296    .text.USB_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_DMA_IRQHandler
hdma_tim1_ch1
hdma_tim1_ch3_up
HAL_TIM_IRQHandler
htim1
HAL_PCD_IRQHandler
hpcd_USB_FS
